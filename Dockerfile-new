# Stage 1: Build and install dependencies
FROM python:3.12-alpine as builder
WORKDIR /usr/src/app

# Install dependencies in one run to avoid extra layers
COPY requirements.txt .
RUN apk add --no-cache --virtual .build-deps gcc musl-dev \
    && pip install --no-cache-dir -r requirements.txt \
    # Purge the build dependencies and clear apk cache
    && apk --purge del .build-deps \
    && rm -rf /var/cache/apk/*

# Stage 2: Copy only the necessary files and prepare the runtime environment
FROM python:3.12-alpine
WORKDIR /usr/src/app

# Copying installed packages from builder
COPY --from=builder /usr/local/lib/python3.12/site-packages /usr/local/lib/python3.12/site-packages

# Copy the rest of the application files
COPY . .

# Adjust permissions and create a non-root user
RUN adduser -D moa \
    # Ensure the user owns the application files and has correct permissions
    && chown -R moa:moa /usr/src/app \
    && find /usr/src/app -type d -exec chmod 755 {} \; \
    && find /usr/src/app -type f -exec chmod 644 {} \; \
    && chmod 755 /usr/src/app # The entry directory can be executable

USER moa

# Expose the necessary port
EXPOSE 8080

# Use a more efficient health check. Make sure `wget` is available or use `curl`
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:8080 exit 1

# Start the app
CMD ["python", "MOA/webapp.py"]
